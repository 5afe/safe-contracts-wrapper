"""
import { Module } into SafeContracts from "wrap://ens/safe.wraps.eth:contracts@0.0.1"

import {
    Module,
    Connection,
    Log,
    TxRequest,
    TxReceipt,
    TxResponse,
    TxOptions,
    StaticTxResult
} into Ethereum from "wrap://ens/wraps.eth:ethereum@1.1.0"
import { Module } into EthersUtils from "wrap://ens/wraps.eth:ethereum-utils@0.0.1"
import * into Datetime from "wrap://ens/datetime.polywrap.eth"
import * into Logger from "wrap://ens/wraps.eth:logger@1.0.0"
"""

type Module {
    deploySafe(
        input: DeploymentInput!
        txOptions: Ethereum_TxOptions
    ): String!

    predictSafeAddress(
        input: DeploymentInput!
    ): String!

    safeIsDeployed(
        safeAddress: String!
        connection: Ethereum_Connection!
    ): Boolean!

    deploySafeEncodedTransaction(
        input: DeploymentInput!
    ): String!
}

type DeploymentInput {
    safeAccountConfig: SafeAccountConfig!
    safeDeploymentConfig: SafeDeploymentConfig
    customContractAdressess: CustomContract
    connection: Ethereum_Connection
}

enum OperationType {
    Call,
    DelegateCall
}

type CustomContract {
    proxyFactoryContract: String
    safeFactoryContract: String
}

type DeploymentPayload {
    safeContractAddress: String!
    safeFactoryContractAddress: String!
    initializer: String!
    saltNonce: String!
}

type SafeAccountConfig {
    owners: [String!]!
    threshold: UInt!
    to: String
    data: String
    fallbackHandler: String
    paymentToken: String
    payment: BigInt
    paymentReceiver: String
}

type SafeDeploymentConfig {
    saltNonce: String!
    isL1Safe: Boolean
    version: String
}

type MetaTransactionData {
    to: String!
    value: String!
    data: String!
    operation: OperationType
}

type SafeTransactionData implements MetaTransactionData {
    safeTxGas: BigInt!
    baseGas: BigInt!
    gasPrice: BigInt!
    gasToken: String!
    refundReceiver: String!
    nonce: BigInt!
}

type SafeTransactionDataPartial implements MetaTransactionData {
    safeTxGas: BigInt
    baseGas: BigInt
    gasPrice: BigInt
    gasToken: String
    refundReceiver: String
    nonce: BigInt
}


type BaseTransactionResult {
    hash: String!
}

type TransactionResult implements BaseTransactionResult {
    receipt: Ethereum_TxReceipt
    transactionResponse: Ethereum_TxResponse
    #options: TransactionOptions
}

type TransactionOptions {
    from: String
    gas: BigInt
    gasLimit: BigInt
    gasPrice: BigInt
    maxFeePerGas: BigInt
    maxPriorityFeePerGas: BigInt
}

type Eip3770Address {
    prefix: String!
    address: String!
}
