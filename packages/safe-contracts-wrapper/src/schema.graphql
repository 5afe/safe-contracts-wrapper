"""
import {
    Module,
    Connection,
    TxOptions
} into Ethereum from "wrap://ens/wraps.eth:ethereum@1.0.0"

import {
    SignSignature,
    SafeTransaction,
    SafeTransactionData,
    TransactionOptions,
    SafeTransactionOptionalProps
} from "../../safe-common-types/schema.graphql"
"""

type Module {
    """
    Module to deploy and interact with the proxy factory smart-contract
    """
    createProxy(address: String!, safeMasterCopyAddress: String!, initializer: String!, saltNonce: UInt32!, connection: Ethereum_Connection, txOverrides: Ethereum_TxOptions): String
    proxyCreationCode(address: String!, connection: Ethereum_Connection): String!

    """
    GnosisSafeContractEthers methods
    """
    getVersion(address: String!, connection: Ethereum_Connection): String!
    getAddress(address: String!, connection: Ethereum_Connection): String!
    getNonce(address: String!, connection: Ethereum_Connection): BigInt!
    
    getThreshold(address: String!, connection: Ethereum_Connection): UInt32!
    getOwners(address: String!, connection: Ethereum_Connection): [String!]!
    isOwner(address: String!, ownerAddress: String!, connection: Ethereum_Connection): Boolean!

    getTransactionHash(safeAddress: String!, safeTransactionData: SafeTransactionData!, connection: Ethereum_Connection): String!
    approvedHashes(address: String!, ownerAddress: String!, hash: String!, connection: Ethereum_Connection): BigInt!
    approveHash(safeAddress: String!, hash: String!, options: TransactionOptions, connection: Ethereum_Connection): Ethereum_TxReceipt!

    getModules(address: String!, connection: Ethereum_Connection): [String!]!
    isModuleEnabled(address: String!, moduleAddress: String!, connection: Ethereum_Connection): Boolean!

    execTransaction(safeAddress: String!, safeTransaction: SafeTransaction!, txOverrides: Ethereum_TxOptions, connection: Ethereum_Connection): Ethereum_TxReceipt!

    encode(method: String!, args: [String!]!): String!
    estimateGas(address: String!, method: String!, args: [String!]!, connection: Ethereum_Connection): BigInt!

    getSafeContractNetworks(version: String!, chainId: String!, isL1Safe: Boolean): ContractNetworksConfig

}

type ContractNetworksConfig {
    multiSendAddress: String
    multiSendCallOnlyAddress: String
    safeMasterCopyAddress: String
    safeProxyFactoryAddress: String
}
