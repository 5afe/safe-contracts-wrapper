#import { Module } into SafeContracts from "wrap://ipfs/QmUaomUYZp5b7rEuCtqB5Lbwozds8krvVZokqYpdTut8W7"
#import { Module, Connection, TxOverrides, TxReceipt } into Ethereum from "wrap://ens/ethereum.polywrap.eth"
#import { Module } into Logger from "wrap://ens/js-logger.polywrap.eth"

type Env {
    safeAddress: String!
    connection: Ethereum_Connection!
}

type SafeTransaction {
    signatures: Map @annotate(type: "Map<String!, String!>")
    data: SafeTransactionData!
}

type SafeTransactionData {
    data: String!
    to: String!
    value: String!
    operation: UInt8
    safeTxGas: UInt32 #BigInt
    baseGas: UInt32 #BigInt
    gasPrice: UInt32 #BigInt
    gasToken: String
    refundReceiver: String
    nonce: UInt32 #BigInt
    # TODO: add txOverrides
}

type SignSignature {
    signer: String!
    data: String!
}

type Module {
    """Owner manager methods"""
    getOwners: [String!]! @env(required: true)
    getThreshold: UInt32! @env(required: true)
    isOwner(ownerAddress: String!): Boolean! @env(required: true)
    encodeAddOwnerWithThresholdData(ownerAddress: String!, threshold: UInt32): String! @env(required: true)
    encodeRemoveOwnerData(ownerAddress: String!, threshold: UInt32): String! @env(required: true)
    encodeSwapOwnerData(oldOwnerAddress: String!, newOwnerAddress: String!): String! @env(required: true)
    encodeChangeThresholdData(threshold: UInt32!): String! @env(required: true)

    """Module manager methods"""
    getModules: [String!]! @env(required: true)
    isModuleEnabled(moduleAddress: String!): Boolean! @env(required: true)
    encodeEnableModuleData(moduleAddress: String!): String! @env(required: true)
    encodeDisableModuleData(moduleAddress: String!): String! @env(required: true)

    """Transaction manager methods"""
    createTransaction(tx: SafeTransactionData!): SafeTransaction! @env(required: true)
    addSignature(tx: SafeTransaction!): SafeTransaction! @env(required: true)
    getTransactionHash(tx: SafeTransactionData!): String @env(required: true)
    signTransactionHash(hash: String!): SignSignature! @env(required: true)
}
