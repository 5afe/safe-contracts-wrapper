#import { Module } into SafeContracts from "wrap://ens/safe.contracts.polywrap.eth"
#import { Module, Connection, TxOverrides, TxReceipt } into Ethereum from "wrap://ens/ethereum.polywrap.eth"
#import { Module } into Logger from "wrap://ens/js-logger.polywrap.eth"
#import { SignSignature, SafeTransaction, SafeTransactionData, SafeTransactionOptionalProps, TransactionOptions } into Interface from "wrap://ens/safe.interface.polywrap.eth"

type Env {
    safeAddress: String!
    connection: Ethereum_Connection!
}

type MetaTransactionData {
    data: String!
    to: String!
    value: String!
    operation: BigInt
}

type Module {
    """Safe methods"""
    createTransaction(tx: Interface_SafeTransactionData!, options: Interface_SafeTransactionOptionalProps): Interface_SafeTransaction! @env(required: true)
    createMultiSendTransaction(txs: [Interface_SafeTransactionData!]!, options: Interface_SafeTransactionOptionalProps, onlyCalls: Boolean, customMultiSendContractAddress: String ): Interface_SafeTransaction! @env(required: true)
    addSignature(tx: Interface_SafeTransaction!, signingMethod: String): Interface_SafeTransaction! @env(required: true)
    getTransactionHash(tx: Interface_SafeTransactionData!): String @env(required: true)
    signTransactionHash(hash: String!): Interface_SignSignature! @env(required: true)
    signTypedData(tx: Interface_SafeTransactionData!): Interface_SignSignature! @env(required: true)
    approveTransactionHash(hash: String!, options: Interface_TransactionOptions): Ethereum_TxReceipt! @env(required: true)
    executeTransaction(tx: Interface_SafeTransaction!, options: Interface_TransactionOptions): Ethereum_TxReceipt! @env(required: true)
    getOwnersWhoApprovedTx(hash: String!): [String!]! @env(required: true)

    """Owner manager methods"""
    getOwners: [String!]! @env(required: true)
    getThreshold: UInt32! @env(required: true)
    isOwner(ownerAddress: String!): Boolean! @env(required: true)
    encodeAddOwnerWithThresholdData(ownerAddress: String!, threshold: UInt32): String! @env(required: true)
    encodeRemoveOwnerData(ownerAddress: String!, threshold: UInt32): String! @env(required: true)
    encodeSwapOwnerData(oldOwnerAddress: String!, newOwnerAddress: String!): String! @env(required: true)
    encodeChangeThresholdData(threshold: UInt32!): String! @env(required: true)

    """Module manager methods"""
    getModules: [String!]! @env(required: true)
    isModuleEnabled(moduleAddress: String!): Boolean! @env(required: true)
    encodeEnableModuleData(moduleAddress: String!): String! @env(required: true)
    encodeDisableModuleData(moduleAddress: String!): String! @env(required: true)

    """Contract manager methods"""
    getAddress: String! @env(required: true)
    getContractVersion: String! @env(required: true)
    getNonce: BigInt! @env(required: true)
    getMultiSendAddress: String! @env(required: true)
    getMultiSendCallOnlyAddress: String! @env(required: true)
}
